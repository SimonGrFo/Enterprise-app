version: '3.8'

services:
  db-primary:
    image: postgres:13
    container_name: postgres_db_primary
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_primary:/var/lib/postgresql/data
    networks:
      - my_network
    command: >
      -c wal_level=replica
      -c max_wal_senders=2
      -c max_replication_slots=2

  db-secondary:
    image: postgres:13
    container_name: postgres_db_secondary
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5434:5432"
    volumes:
      - postgres_data_secondary:/var/lib/postgresql/data
    networks:
      - my_network
    depends_on:
      - db-primary

  app:
    build: .
    container_name: spring_boot_app
    depends_on:
      - db-primary
      - db-secondary
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_db_primary:5432/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-dev}
      APP_JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: ${PORT:-8080}
    ports:
      - "${PORT}:${PORT}"
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react_frontend_app
    ports:
      - "3000:80"
    networks:
      - my_network
    depends_on:
      - app

volumes:
  postgres_data_primary:
  postgres_data_secondary:

networks:
  my_network:
    driver: bridge